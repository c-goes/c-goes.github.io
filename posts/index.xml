<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on c-goes's Linux Blog</title><link>https://c-goes.github.io/posts/</link><description>Recent content in Posts on c-goes's Linux Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 30 May 2021 22:00:00 +0200</lastBuildDate><atom:link href="https://c-goes.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Bitbake fails with could not allocate block in ext2 filesystem on ZFS. How to work around this issue?</title><link>https://c-goes.github.io/posts/bitbake-yocto-could-not-allocate-block-in-ext2-filesystem/</link><pubDate>Sun, 30 May 2021 22:00:00 +0200</pubDate><guid>https://c-goes.github.io/posts/bitbake-yocto-could-not-allocate-block-in-ext2-filesystem/</guid><description>Symptom Bitbake build fails in a LXC container located on ZFS storage (Proxmox PVE) with a error message
&amp;ldquo;__populate_fs: Could not allocate block in ext2 filesystem while writing file&amp;hellip;&amp;rdquo;
Workaround Make a ZFS subvolume with a ext4 filesystem and then mount it into the unprivileged container. The container user has UID 1000 which is mappend to 101000 on the host.
zfs create -s -V 80G rpool/tmp-build mkfs.ext4 /dev/zvol/rpool/tmp-build mkdir /tmp-build mount /dev/zvol/rpool/tmp-build /tmp-build # add LXC user's uid to 100000 chown -R 101000:101000 /tmp-build/ # bind mount to LXC container using Proxmox tool pct set 104 -mp0 mp=/tmp-build,/tmp-build Change your config to use the new tmpdir in local.</description><content>&lt;h1 id="symptom">Symptom&lt;/h1>
&lt;p>Bitbake build fails in a LXC container located on ZFS storage (Proxmox PVE) with a error message&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;__populate_fs: Could not allocate block in ext2 filesystem while writing file&amp;hellip;&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;h1 id="workaround">Workaround&lt;/h1>
&lt;p>Make a ZFS subvolume with a ext4 filesystem and then mount it into the unprivileged container. The container user has UID &lt;code>1000&lt;/code> which is mappend to &lt;code>101000&lt;/code> on the host.&lt;/p>
&lt;pre>&lt;code>zfs create -s -V 80G rpool/tmp-build
mkfs.ext4 /dev/zvol/rpool/tmp-build
mkdir /tmp-build
mount /dev/zvol/rpool/tmp-build /tmp-build
# add LXC user's uid to 100000
chown -R 101000:101000 /tmp-build/
# bind mount to LXC container using Proxmox tool
pct set 104 -mp0 mp=/tmp-build,/tmp-build
&lt;/code>&lt;/pre>&lt;p>Change your config to use the new tmpdir in local.conf or kas&amp;rsquo;s &lt;code>local_conf_header&lt;/code>.&lt;/p>
&lt;pre>&lt;code>TMPDIR = &amp;quot;/tmp-build/dunfell&amp;quot;
&lt;/code>&lt;/pre></content></item><item><title>How to setup Docker with fuse-overlayfs in Proxmox LXC container</title><link>https://c-goes.github.io/posts/proxmox-lxc-docker-fuse-overlayfs/</link><pubDate>Thu, 13 May 2021 17:00:00 +0200</pubDate><guid>https://c-goes.github.io/posts/proxmox-lxc-docker-fuse-overlayfs/</guid><description>Create a new LXC Container In Proxmox VE create a unprivileged LXC container with fuse=1,keyctl=1,mknod=1,nesting=1 (I&amp;rsquo;m not sure if all are needed). In this case I use a Ubuntu 18.04 container.
Installation of fuse-overlayfs fuse-overlayfs is a similar to overlayfs runs in userspace and can be used without root permissions1. Unlike overlayfs, fuse-overlayfs can be also used when the backing filesystem is ZFS, like on Proxmox VE.
Then inside the container, install a static version of fuse-overlayfs.</description><content>&lt;h1 id="create-a-new-lxc-container">Create a new LXC Container&lt;/h1>
&lt;p>In Proxmox VE create a unprivileged LXC container with &lt;code>fuse=1,keyctl=1,mknod=1,nesting=1&lt;/code> (I&amp;rsquo;m not sure if all are needed).
In this case I use a Ubuntu 18.04 container.&lt;/p>
&lt;h1 id="installation-of-fuse-overlayfs">Installation of &lt;code>fuse-overlayfs&lt;/code>&lt;/h1>
&lt;p>&lt;code>fuse-overlayfs&lt;/code> is a similar to overlayfs runs in userspace and can be used without root permissions&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. Unlike overlayfs, fuse-overlayfs can be also used when the backing filesystem is ZFS, like on Proxmox VE.&lt;/p>
&lt;p>Then inside the container, install a static version of &lt;a href="https://github.com/containers/fuse-overlayfs/releases">fuse-overlayfs&lt;/a>.
and place it in &lt;code>/usr/local/bin&lt;/code> so it&amp;rsquo;s named &lt;code>/usr/local/bin/fuse-overlayfs&lt;/code>.&lt;/p>
&lt;h1 id="installation-of-dockerio">Installation of &lt;code>docker.io&lt;/code>&lt;/h1>
&lt;p>&lt;code>docker.io&lt;/code> is the Debian specific build of the Moby container engine. Unlike noted in the &lt;a href="https://docs.docker.com/engine/install/ubuntu/">Docker documentation&lt;/a> this isn&amp;rsquo;t an old version but rather a version &lt;a href="https://salsa.debian.org/go-team/packages/docker">packaged by the Debian Go team&lt;/a>.&lt;/p>
&lt;pre>&lt;code>apt-get install docker.io
&lt;/code>&lt;/pre>&lt;p>In my case this installed the version 20.10.2&lt;/p>
&lt;pre>&lt;code># docker info
Client:
Context: default
Debug Mode: false
Server:
Containers: 2
Running: 0
Paused: 0
Stopped: 2
Images: 1
Server Version: 20.10.2
Storage Driver: fuse-overlayfs
Logging Driver: json-file
Cgroup Driver: cgroupfs
Cgroup Version: 1
(...)
&lt;/code>&lt;/pre>&lt;p>To my surprise, it auto-detected that I have &lt;code>fuse-overlayfs&lt;/code> installed and uses it. And this although I&amp;rsquo;m not using rootless Docker!&lt;/p>
&lt;p>Now I can use Docker nested in LXC on Proxmox VE without the efficiency problems of VFS.&lt;/p>
&lt;h1 id="future-work">Future Work&lt;/h1>
&lt;p>It would be also interesting to use Podman in LXC on Proxmox PVE but I couldn&amp;rsquo;t get it working so far. I know it&amp;rsquo;s possible to use rootless Podman in unprivileged &lt;a href="https://linuxcontainers.org/lxd/introduction/">LXD&lt;/a> container using the &lt;code>security.nesting&lt;/code> flag. However LXC on PVE is a bit different from LXD.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Debian 10 and similar systems also support overlayfs without root but this isn&amp;rsquo;t working on a ZFS filesystem and it&amp;rsquo;s not directly usable inside a container. In newer kernel versions &lt;a href="https://lore.kernel.org/linux-fsdevel/1725e01a-4d4d-aecb-bad6-54aa220b4cd2@i-love.sakura.ne.jp/T/">unprivileged overlay mount is possible&lt;/a> by default. This could mean that unprivileged overlay will also be supported in Fedora-like distributions in the future. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></content></item><item><title>First post</title><link>https://c-goes.github.io/posts/first-post/</link><pubDate>Thu, 13 May 2021 15:00:00 +0200</pubDate><guid>https://c-goes.github.io/posts/first-post/</guid><description>I&amp;rsquo;m writing this blog about Linux containers and related things. I mainly will use it to document steps on how to set up containers in different scenarios.</description><content>&lt;p>I&amp;rsquo;m writing this blog about Linux containers and related things. I mainly will use it to document steps on how to set up containers in different scenarios.&lt;/p></content></item></channel></rss>